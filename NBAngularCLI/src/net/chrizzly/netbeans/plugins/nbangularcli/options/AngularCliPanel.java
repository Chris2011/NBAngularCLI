package net.chrizzly.netbeans.plugins.nbangularcli.options;

import java.io.File;
import java.util.List;
import org.openide.awt.StatusDisplayer;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

final class AngularCliPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private final AngularCliOptionsPanelController controller;

    public static final String EXECUTABLE_NAME = "ng.cmd"; // NOI18N
    public static final String EXECUTABLE_LONG_NAME = EXECUTABLE_NAME + FileUtils.getScriptExtension(true, false);

    AngularCliPanel(AngularCliOptionsPanelController controller) {
        this.controller = controller;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ngCliFolderBrowseButton = new javax.swing.JButton();
        ngCliPathTextField = new javax.swing.JTextField();
        ngCliPathBrowseButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AngularCliPanel.class, "AngularCliPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ngCliFolderBrowseButton, org.openide.util.NbBundle.getMessage(AngularCliPanel.class, "AngularCliPanel.ngCliFolderBrowseButton.text")); // NOI18N
        ngCliFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngCliFolderBrowseButtonActionPerformed(evt);
            }
        });

        ngCliPathTextField.setText(org.openide.util.NbBundle.getMessage(AngularCliPanel.class, "AngularCliPanel.ngCliPathTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ngCliPathBrowseButton, org.openide.util.NbBundle.getMessage(AngularCliPanel.class, "AngularCliPanel.ngCliPathBrowseButton.text")); // NOI18N
        ngCliPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngCliPathBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngCliPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngCliFolderBrowseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngCliPathBrowseButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(ngCliPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ngCliFolderBrowseButton)
                .addComponent(ngCliPathBrowseButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    @NbBundle.Messages("NgCliOptionsPanel.browse.title=Select Angular CLI")
    private void ngCliFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngCliFolderBrowseButtonActionPerformed
        File file = new FileChooserBuilder(AngularCliPanel.class)
                .setFilesOnly(true)
                .setTitle(Bundle.NgCliOptionsPanel_browse_title())
                .showOpenDialog();
        if (file != null) {
            ngCliPathTextField.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_ngCliFolderBrowseButtonActionPerformed

    @NbBundle.Messages("NgCliOptionsPanel.executable.notFound=No Angular CLI executable found.")
    private void ngCliPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngCliPathBrowseButtonActionPerformed
        List<String> ngCliPaths = FileUtils.findFileOnUsersPath(EXECUTABLE_LONG_NAME, EXECUTABLE_NAME);
        if (ngCliPaths.isEmpty()) {
            StatusDisplayer.getDefault().setStatusText(Bundle.NgCliOptionsPanel_executable_notFound());
        } else {
            ngCliPathTextField.setText(ngCliPaths.get(0));
        }
    }//GEN-LAST:event_ngCliPathBrowseButtonActionPerformed

    void load() {
        String ngCli = NbPreferences.forModule(AngularCliPanel.class).get("ngCliExecutableLocation", "");
        ngCliPathTextField.setText(ngCli);
    }

    void store() {
        NbPreferences.forModule(AngularCliPanel.class).put("ngCliExecutableLocation", ngCliPathTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton ngCliFolderBrowseButton;
    private javax.swing.JButton ngCliPathBrowseButton;
    private javax.swing.JTextField ngCliPathTextField;
    // End of variables declaration//GEN-END:variables
}
